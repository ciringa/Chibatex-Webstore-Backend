var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.711,1,1.449]],["body/modules/AppModule.html",[0,2.543,1,2.711,2,1.601,3,1.355,4,1.929,5,1.929,6,1.355,7,3.065,8,1.929,9,1.929,10,1.929,11,1.594,12,0.058,13,1.32,14,2.086,15,2.672,16,1.929,17,1.601,18,0.527,19,0.438,20,0.438,21,2.429,22,2.672,23,1.841,24,1.32,25,0.625,26,2.429,27,2.429,28,2.429,29,2.429,30,2.429,31,2.429,32,0.527,33,0.356,34,0.038,35,0.038]],["title/classes/EntityDoesNotExists.html",[33,0.381,36,1.239]],["body/classes/EntityDoesNotExists.html",[12,0.054,18,0.695,19,0.578,20,0.578,32,0.695,33,0.47,34,0.046,35,0.046,36,1.928,37,2.112,38,2.546,39,2.663,40,3.21,41,2.112,42,3.204,43,1.656,44,1.129,45,3.204,46,1.314,47,1.314,48,0.824,49,1.314,50,4.04,51,1.314,52,3.204,53,2.546,54,3.204]],["title/injectables/PrismaService.html",[11,0.915,55,0.668]],["body/injectables/PrismaService.html",[11,1.344,12,0.057,18,0.635,19,0.528,20,0.528,24,1.152,25,0.753,32,0.635,33,0.43,34,0.043,35,0.043,39,2.514,44,1.032,55,0.981,56,1.634,57,2.327,58,4.242,59,0.753,60,1.82,61,1.739,62,4.777,63,2.929,64,1.398,65,0.884,66,2.327,67,1.398,68,2.929]],["title/classes/ResourceIsAlreadyUse.html",[33,0.381,69,1.239]],["body/classes/ResourceIsAlreadyUse.html",[12,0.054,18,0.691,19,0.574,20,0.574,32,0.691,33,0.467,34,0.046,35,0.046,37,2.099,39,2.652,40,3.197,41,2.099,43,1.65,44,1.122,46,1.305,47,1.305,48,0.819,49,1.305,51,1.305,53,2.53,69,1.92,70,2.53,71,3.184,72,3.184,73,4.025,74,3.184,75,1.519,76,1.519]],["title/controllers/UserController.html",[23,1.239,77,1.239]],["body/controllers/UserController.html",[12,0.059,13,0.619,18,0.445,19,0.369,20,0.369,22,1.628,23,1.422,24,1.238,25,0.527,32,0.445,33,0.301,34,0.034,35,0.034,44,0.722,46,0.84,47,0.84,48,0.527,49,0.84,51,0.84,59,0.527,60,1.422,61,1.44,64,0.978,65,0.619,67,0.978,69,1.422,75,0.978,76,0.978,77,0.978,78,1.351,79,2.049,80,1.44,81,1.663,82,2.049,83,2.981,84,2.049,85,2.049,86,2.049,87,2.368,88,1.351,89,1.628,90,1.628,91,1.628,92,1.628,93,1.351,94,0.527,95,1.143,96,1.628,97,1.628,98,1.628,99,1.351,100,1.628,101,1.628,102,1.628,103,1.628,104,1.628,105,1.422,106,1.628,107,1.628,108,1.628,109,1.628,110,1.628,111,1.628,112,1.628,113,1.628,114,1.628,115,1.628,116,1.143,117,1.422,118,1.628,119,1.628,120,1.628,121,1.628,122,1.628,123,1.628,124,1.628,125,1.628,126,1.628,127,1.628,128,0.84,129,1.628,130,1.628]],["title/interfaces/UserCreateUseCase.html",[94,0.668,131,1.449]],["body/interfaces/UserCreateUseCase.html",[11,0.686,12,0.059,13,0.588,18,0.423,19,0.351,20,0.351,24,1.269,25,0.501,32,0.423,33,0.286,34,0.033,35,0.033,36,0.929,48,0.501,51,0.798,55,0.739,59,0.501,61,1.399,65,0.588,67,1.916,75,0.929,76,0.929,80,1.399,94,0.501,105,1.797,116,1.602,117,1.628,128,1.177,131,1.602,132,1.087,133,1.284,134,1.37,135,3.19,136,0.929,137,1.547,138,1.284,139,1.547,140,1.547,141,1.547,142,1.547,143,1.547,144,1.547,145,1.284,146,1.547,147,2.711,148,1.547,149,1.547,150,2.711,151,2.249,152,1.547,153,1.547,154,1.602,155,1.547,156,1.547,157,1.547,158,1.284,159,1.602,160,1.547,161,1.547,162,2.282,163,1.284,164,1.602,165,1.547]],["title/injectables/UserService.html",[13,0.784,55,0.668]],["body/injectables/UserService.html",[11,1.063,12,0.059,13,0.744,18,0.345,19,0.287,20,0.287,24,1.174,25,0.409,32,0.345,33,0.233,34,0.028,35,0.028,36,0.759,41,1.048,43,1.393,44,1.197,46,1.393,47,1.393,48,0.874,49,1.393,51,0.652,55,0.634,56,0.887,59,0.409,60,1.176,61,1.763,64,1.439,65,0.48,67,1.754,75,0.759,76,0.759,80,0.652,81,1.375,88,1.988,94,0.409,105,1.621,116,1.375,117,1.439,128,1.236,131,0.887,133,1.048,135,1.958,136,0.759,137,1.264,138,1.048,139,1.264,140,1.264,141,1.264,142,1.264,143,1.264,144,1.264,145,1.048,146,1.264,147,2.396,148,1.264,149,1.264,150,2.396,151,1.988,152,1.264,153,1.264,154,1.683,155,1.264,156,1.264,157,1.264,158,1.048,159,1.895,160,1.264,161,1.264,162,1.958,163,1.048,164,1.895,165,1.264,166,1.591,167,1.591,168,1.591,169,1.048,170,1.624,171,1.591,172,1.048,173,1.591,174,1.048,175,1.591,176,1.048]],["title/coverage.html",[177,2.32]],["body/coverage.html",[6,1.451,11,0.917,12,0.057,13,0.786,14,1.241,20,0.469,23,1.241,33,0.517,34,0.04,35,0.04,36,1.241,38,2.067,48,0.669,55,1.028,57,2.067,69,1.241,70,2.067,77,1.241,78,2.323,94,1.028,95,1.451,131,1.451,133,2.323,151,1.715,177,1.715,178,2.067,179,2.602,180,2.602,181,4.924,182,4.48,183,3.525,184,2.067,185,2.602,186,2.602,187,2.067,188,1.451,189,2.067,190,3.525,191,2.602,192,2.602]],["title/interfaces/createPostResponse.html",[94,0.668,95,1.449]],["body/interfaces/createPostResponse.html",[12,0.059,13,0.614,18,0.441,19,0.367,20,0.367,23,0.97,24,1.234,25,0.523,32,0.441,33,0.298,34,0.034,35,0.034,43,1.215,48,0.9,51,0.833,59,0.523,61,0.833,65,0.614,67,0.97,69,1.414,75,0.97,76,0.97,77,0.97,78,1.34,80,1.576,87,1.615,89,1.615,90,1.615,91,1.615,92,1.615,93,1.34,94,0.523,95,1.653,96,1.615,97,1.615,98,1.615,99,2.305,100,1.615,101,1.615,102,1.615,103,1.615,104,1.615,105,1.414,106,1.615,107,1.615,108,1.615,109,1.615,110,1.615,111,1.615,112,1.615,113,1.615,114,3.054,115,1.615,116,1.134,117,1.414,118,1.615,119,1.615,120,1.615,121,1.615,122,1.615,123,1.615,124,1.615,125,3.054,126,1.615,127,1.615,128,0.833,129,1.615,130,1.615,132,1.134,134,1.414,193,2.305,194,2.964]],["title/dependencies.html",[3,1.739,195,1.732]],["body/dependencies.html",[3,1.81,12,0.058,25,0.835,34,0.046,35,0.046,65,0.98,93,2.139,136,1.548,138,2.139,196,4.451,197,3.245,198,3.245,199,3.245,200,4.073,201,3.245,202,3.245,203,3.245,204,3.245,205,3.245,206,3.245,207,3.245]],["title/miscellaneous/functions.html",[208,1.732,209,2.476]],["body/miscellaneous/functions.html",[6,2.652,12,0.051,34,0.051,35,0.051,59,0.97,184,2.996,208,2.996,209,2.996,210,3.771]],["title/injectables/inMemoryUserRepositorie.html",[14,1.239,55,0.668]],["body/injectables/inMemoryUserRepositorie.html",[12,0.058,14,1.315,18,0.4,19,0.332,20,0.332,24,1.107,25,0.474,32,0.4,33,0.27,34,0.031,35,0.031,43,1.688,44,1.291,46,1.354,47,1.354,48,0.943,49,1.354,55,0.709,56,1.028,59,0.474,60,1.315,61,1.839,64,1.575,65,0.556,66,1.464,80,1.13,81,1.538,99,1.214,105,0.879,117,1.575,128,1.13,134,1.315,136,0.879,154,1.028,159,1.538,164,1.538,169,1.816,170,2.176,172,1.816,174,1.816,176,1.816,188,1.842,189,1.464,211,3.302,212,2.756,213,1.843,214,3.302,215,1.843,216,1.843,217,1.843,218,1.843,219,1.843,220,3.302,221,1.843,222,1.843,223,1.843,224,2.756,225,1.843,226,1.843,227,1.843,228,1.843,229,1.843,230,1.843,231,1.843,232,2.756,233,1.843,234,1.843]],["title/index.html",[59,0.561,235,2.18,236,2.18]],["body/index.html",[12,0.054,17,2.344,19,0.313,34,0.03,35,0.03,177,1.144,178,1.379,193,1.144,237,1.736,238,1.736,239,3.186,240,1.736,241,1.736,242,1.736,243,1.736,244,1.736,245,1.736,246,3.186,247,1.736,248,1.736,249,1.736,250,3.557,251,1.736,252,3.186,253,4.183,254,1.736,255,4.183,256,1.736,257,1.736,258,1.736,259,2.636,260,1.736,261,1.736,262,1.736,263,3.186,264,1.736,265,2.636,266,1.736,267,1.736,268,1.736,269,3.557,270,1.736,271,1.736,272,1.736,273,1.736,274,1.736,275,3.557,276,2.636,277,1.736,278,3.186,279,1.736,280,2.825,281,2.636,282,1.736,283,1.736,284,1.736,285,1.736,286,1.736,287,1.736,288,3.186,289,1.736,290,1.736,291,1.736,292,2.636,293,1.736,294,1.736,295,1.736,296,3.186,297,1.736,298,1.736,299,1.736,300,1.736,301,1.736,302,1.736,303,1.736,304,2.636,305,1.736,306,1.736,307,1.736,308,1.736,309,1.736,310,1.736,311,2.636,312,1.736,313,1.736,314,1.736,315,2.636,316,2.636,317,1.736,318,1.736,319,1.736,320,1.736,321,1.736,322,1.736,323,1.736,324,1.736,325,1.736,326,1.736,327,1.736,328,1.379,329,1.736,330,1.736,331,1.736,332,1.736,333,1.736,334,1.736,335,1.379]],["title/modules.html",[2,2.32]],["body/modules.html",[1,2.135,2,2.523,12,0.051,34,0.051,35,0.051,280,3.041,336,3.828,337,3.828,338,3.828]],["title/overview.html",[339,2.797]],["body/overview.html",[0,2.542,1,2.762,3,1.663,4,2.368,5,2.368,6,1.663,7,2.368,8,2.368,9,2.368,10,2.368,11,1.507,12,0.053,13,1.292,14,2.041,15,3.065,16,2.368,17,1.964,34,0.044,35,0.044,37,1.964,56,1.663,77,1.422,132,1.663,339,2.368,340,3.858,341,3.858,342,2.98]],["title/properties.html",[134,1.487,195,1.732]],["body/properties.html",[12,0.057,34,0.05,35,0.05,134,1.76,193,2.432,328,2.931,335,2.931,343,3.69,344,3.69,345,3.69]],["title/interfaces/userRepositorie.html",[94,0.668,188,1.449]],["body/interfaces/userRepositorie.html",[12,0.057,18,0.548,19,0.455,20,0.455,24,1.043,25,0.649,32,0.548,34,0.039,35,0.039,43,1.735,44,1.387,46,1.614,47,1.614,48,1.013,49,1.614,55,0.649,59,0.649,60,1.648,64,1.879,65,0.762,80,1.035,81,1.927,88,2.595,94,0.649,128,1.035,132,1.408,136,1.205,145,1.664,154,1.408,158,1.664,159,1.927,163,1.664,164,1.927,169,1.664,170,2.276,172,1.664,174,1.664,176,1.664,187,2.006,188,1.927,346,2.525,347,2.525,348,2.525]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"classes/EntityDoesNotExists.html":{},"injectables/PrismaService.html":{},"classes/ResourceIsAlreadyUse.html":{},"controllers/UserController.html":{},"interfaces/UserCreateUseCase.html":{},"injectables/UserService.html":{},"coverage.html":{},"interfaces/createPostResponse.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"injectables/inMemoryUserRepositorie.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"interfaces/userRepositorie.html":{}}}],["0",{"_index":181,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":344,"title":{},"body":{"properties.html":{}}}],["0.2.0",{"_index":204,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":186,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":182,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":183,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":190,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":340,"title":{},"body":{"overview.html":{}}}],["10.0.0",{"_index":196,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":342,"title":{},"body":{"overview.html":{}}}],["2.4.3",{"_index":201,"title":{},"body":{"dependencies.html":{}}}],["3",{"_index":341,"title":{},"body":{"overview.html":{}}}],["3.23.8",{"_index":207,"title":{},"body":{"dependencies.html":{}}}],["409",{"_index":126,"title":{},"body":{"controllers/UserController.html":{},"interfaces/createPostResponse.html":{}}}],["5.19.1",{"_index":200,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":206,"title":{},"body":{"dependencies.html":{}}}],["_data",{"_index":224,"title":{},"body":{"injectables/inMemoryUserRepositorie.html":{}}}],["adress",{"_index":129,"title":{},"body":{"controllers/UserController.html":{},"interfaces/createPostResponse.html":{}}}],["already",{"_index":75,"title":{},"body":{"classes/ResourceIsAlreadyUse.html":{},"controllers/UserController.html":{},"interfaces/UserCreateUseCase.html":{},"injectables/UserService.html":{},"interfaces/createPostResponse.html":{}}}],["amazing",{"_index":321,"title":{},"body":{"index.html":{}}}],["application",{"_index":292,"title":{},"body":{"index.html":{}}}],["applications",{"_index":245,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["async",{"_index":61,"title":{},"body":{"injectables/PrismaService.html":{},"controllers/UserController.html":{},"interfaces/UserCreateUseCase.html":{},"injectables/UserService.html":{},"interfaces/createPostResponse.html":{},"injectables/inMemoryUserRepositorie.html":{}}}],["author",{"_index":328,"title":{},"body":{"index.html":{},"properties.html":{}}}],["await",{"_index":67,"title":{},"body":{"injectables/PrismaService.html":{},"controllers/UserController.html":{},"interfaces/UserCreateUseCase.html":{},"injectables/UserService.html":{},"interfaces/createPostResponse.html":{}}}],["backers",{"_index":322,"title":{},"body":{"index.html":{}}}],["bcryptjs",{"_index":138,"title":{},"body":{"interfaces/UserCreateUseCase.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["board",{"_index":314,"title":{},"body":{"index.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":338,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":336,"title":{},"body":{"modules.html":{}}}],["building",{"_index":240,"title":{},"body":{"index.html":{}}}],["catch(err",{"_index":122,"title":{},"body":{"controllers/UserController.html":{},"interfaces/createPostResponse.html":{}}}],["channel",{"_index":283,"title":{},"body":{"index.html":{}}}],["check",{"_index":269,"title":{},"body":{"index.html":{}}}],["class",{"_index":33,"title":{"classes/EntityDoesNotExists.html":{},"classes/ResourceIsAlreadyUse.html":{}},"body":{"modules/AppModule.html":{},"classes/EntityDoesNotExists.html":{},"injectables/PrismaService.html":{},"classes/ResourceIsAlreadyUse.html":{},"controllers/UserController.html":{},"interfaces/UserCreateUseCase.html":{},"injectables/UserService.html":{},"coverage.html":{},"interfaces/createPostResponse.html":{},"injectables/inMemoryUserRepositorie.html":{}}}],["classes",{"_index":37,"title":{},"body":{"classes/EntityDoesNotExists.html":{},"classes/ResourceIsAlreadyUse.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["come",{"_index":272,"title":{},"body":{"index.html":{}}}],["const",{"_index":105,"title":{},"body":{"controllers/UserController.html":{},"interfaces/UserCreateUseCase.html":{},"injectables/UserService.html":{},"interfaces/createPostResponse.html":{},"injectables/inMemoryUserRepositorie.html":{}}}],["constructor",{"_index":41,"title":{},"body":{"classes/EntityDoesNotExists.html":{},"classes/ResourceIsAlreadyUse.html":{},"injectables/UserService.html":{}}}],["constructor(entity",{"_index":42,"title":{},"body":{"classes/EntityDoesNotExists.html":{}}}],["constructor(prismaservices",{"_index":166,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(private",{"_index":51,"title":{},"body":{"classes/EntityDoesNotExists.html":{},"classes/ResourceIsAlreadyUse.html":{},"controllers/UserController.html":{},"interfaces/UserCreateUseCase.html":{},"injectables/UserService.html":{},"interfaces/createPostResponse.html":{}}}],["constructor(resource",{"_index":71,"title":{},"body":{"classes/ResourceIsAlreadyUse.html":{}}}],["controller",{"_index":77,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"coverage.html":{},"interfaces/createPostResponse.html":{},"overview.html":{}}}],["controller('user",{"_index":100,"title":{},"body":{"controllers/UserController.html":{},"interfaces/createPostResponse.html":{}}}],["controllers",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"controllers/UserController.html":{}}}],["controllers/user.controller",{"_index":29,"title":{},"body":{"modules/AppModule.html":{}}}],["courses",{"_index":290,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":177,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":81,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/inMemoryUserRepositorie.html":{},"interfaces/userRepositorie.html":{}}}],["create(@req",{"_index":103,"title":{},"body":{"controllers/UserController.html":{},"interfaces/createPostResponse.html":{}}}],["create(data",{"_index":169,"title":{},"body":{"injectables/UserService.html":{},"injectables/inMemoryUserRepositorie.html":{},"interfaces/userRepositorie.html":{}}}],["create(data:prisma.usercreateinput):promise",{"_index":145,"title":{},"body":{"interfaces/UserCreateUseCase.html":{},"injectables/UserService.html":{},"interfaces/userRepositorie.html":{}}}],["create(req",{"_index":82,"title":{},"body":{"controllers/UserController.html":{}}}],["created",{"_index":120,"title":{},"body":{"controllers/UserController.html":{},"interfaces/createPostResponse.html":{}}}],["createduser",{"_index":135,"title":{},"body":{"interfaces/UserCreateUseCase.html":{},"injectables/UserService.html":{}}}],["createduser:user",{"_index":143,"title":{},"body":{"interfaces/UserCreateUseCase.html":{},"injectables/UserService.html":{}}}],["createpostresponse",{"_index":95,"title":{"interfaces/createPostResponse.html":{}},"body":{"controllers/UserController.html":{},"coverage.html":{},"interfaces/createPostResponse.html":{}}}],["crypto",{"_index":222,"title":{},"body":{"injectables/inMemoryUserRepositorie.html":{}}}],["data",{"_index":154,"title":{},"body":{"interfaces/UserCreateUseCase.html":{},"injectables/UserService.html":{},"injectables/inMemoryUserRepositorie.html":{},"interfaces/userRepositorie.html":{}}}],["data.role",{"_index":230,"title":{},"body":{"injectables/inMemoryUserRepositorie.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["decorators",{"_index":84,"title":{},"body":{"controllers/UserController.html":{}}}],["deeper",{"_index":285,"title":{},"body":{"index.html":{}}}],["default",{"_index":217,"title":{},"body":{"injectables/inMemoryUserRepositorie.html":{}}}],["defined",{"_index":44,"title":{},"body":{"classes/EntityDoesNotExists.html":{},"injectables/PrismaService.html":{},"classes/ResourceIsAlreadyUse.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/inMemoryUserRepositorie.html":{},"interfaces/userRepositorie.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":193,"title":{},"body":{"interfaces/createPostResponse.html":{},"index.html":{},"properties.html":{}}}],["description:\"successfilly",{"_index":119,"title":{},"body":{"controllers/UserController.html":{},"interfaces/createPostResponse.html":{}}}],["description:\"this",{"_index":127,"title":{},"body":{"controllers/UserController.html":{},"interfaces/createPostResponse.html":{}}}],["description:string",{"_index":97,"title":{},"body":{"controllers/UserController.html":{},"interfaces/createPostResponse.html":{}}}],["development",{"_index":256,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":298,"title":{},"body":{"index.html":{}}}],["discord",{"_index":282,"title":{},"body":{"index.html":{}}}],["dive",{"_index":284,"title":{},"body":{"index.html":{}}}],["dns",{"_index":140,"title":{},"body":{"interfaces/UserCreateUseCase.html":{},"injectables/UserService.html":{}}}],["documentation",{"_index":178,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["doestheemailisalreadyinuse",{"_index":146,"title":{},"body":{"interfaces/UserCreateUseCase.html":{},"injectables/UserService.html":{}}}],["e2e",{"_index":266,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":241,"title":{},"body":{"index.html":{}}}],["email",{"_index":128,"title":{},"body":{"controllers/UserController.html":{},"interfaces/UserCreateUseCase.html":{},"injectables/UserService.html":{},"interfaces/createPostResponse.html":{},"injectables/inMemoryUserRepositorie.html":{},"interfaces/userRepositorie.html":{}}}],["email,name,password,role",{"_index":106,"title":{},"body":{"controllers/UserController.html":{},"interfaces/createPostResponse.html":{}}}],["email,password,name,role",{"_index":116,"title":{},"body":{"controllers/UserController.html":{},"interfaces/UserCreateUseCase.html":{},"injectables/UserService.html":{},"interfaces/createPostResponse.html":{}}}],["email:data.email",{"_index":148,"title":{},"body":{"interfaces/UserCreateUseCase.html":{},"injectables/UserService.html":{}}}],["email:string(data.email",{"_index":225,"title":{},"body":{"injectables/inMemoryUserRepositorie.html":{}}}],["email:z.string().email",{"_index":109,"title":{},"body":{"controllers/UserController.html":{},"interfaces/createPostResponse.html":{}}}],["enterprise",{"_index":303,"title":{},"body":{"index.html":{}}}],["entity",{"_index":50,"title":{},"body":{"classes/EntityDoesNotExists.html":{}}}],["entity:string",{"_index":52,"title":{},"body":{"classes/EntityDoesNotExists.html":{}}}],["entitydoesnotexists",{"_index":36,"title":{"classes/EntityDoesNotExists.html":{}},"body":{"classes/EntityDoesNotExists.html":{},"interfaces/UserCreateUseCase.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["entitydoesnotexists(\"user",{"_index":162,"title":{},"body":{"interfaces/UserCreateUseCase.html":{},"injectables/UserService.html":{}}}],["err",{"_index":123,"title":{},"body":{"controllers/UserController.html":{},"interfaces/createPostResponse.html":{}}}],["error",{"_index":40,"title":{},"body":{"classes/EntityDoesNotExists.html":{},"classes/ResourceIsAlreadyUse.html":{}}}],["error(\"the",{"_index":152,"title":{},"body":{"interfaces/UserCreateUseCase.html":{},"injectables/UserService.html":{}}}],["example",{"_index":252,"title":{},"body":{"index.html":{}}}],["exists",{"_index":54,"title":{},"body":{"classes/EntityDoesNotExists.html":{}}}],["experience",{"_index":287,"title":{},"body":{"index.html":{}}}],["export",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"classes/EntityDoesNotExists.html":{},"injectables/PrismaService.html":{},"classes/ResourceIsAlreadyUse.html":{},"controllers/UserController.html":{},"interfaces/UserCreateUseCase.html":{},"injectables/UserService.html":{},"interfaces/createPostResponse.html":{},"injectables/inMemoryUserRepositorie.html":{},"interfaces/userRepositorie.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["express",{"_index":199,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":39,"title":{},"body":{"classes/EntityDoesNotExists.html":{},"injectables/PrismaService.html":{},"classes/ResourceIsAlreadyUse.html":{}}}],["few",{"_index":270,"title":{},"body":{"index.html":{}}}],["file",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"classes/EntityDoesNotExists.html":{},"injectables/PrismaService.html":{},"classes/ResourceIsAlreadyUse.html":{},"controllers/UserController.html":{},"interfaces/UserCreateUseCase.html":{},"injectables/UserService.html":{},"coverage.html":{},"interfaces/createPostResponse.html":{},"injectables/inMemoryUserRepositorie.html":{},"interfaces/userRepositorie.html":{}}}],["findbyemail",{"_index":164,"title":{},"body":{"interfaces/UserCreateUseCase.html":{},"injectables/UserService.html":{},"injectables/inMemoryUserRepositorie.html":{},"interfaces/userRepositorie.html":{}}}],["findbyemail(email",{"_index":172,"title":{},"body":{"injectables/UserService.html":{},"injectables/inMemoryUserRepositorie.html":{},"interfaces/userRepositorie.html":{}}}],["findbyemail(email:string):promise",{"_index":163,"title":{},"body":{"interfaces/UserCreateUseCase.html":{},"injectables/UserService.html":{},"interfaces/userRepositorie.html":{}}}],["findbyid",{"_index":159,"title":{},"body":{"interfaces/UserCreateUseCase.html":{},"injectables/UserService.html":{},"injectables/inMemoryUserRepositorie.html":{},"interfaces/userRepositorie.html":{}}}],["findbyid(userid",{"_index":174,"title":{},"body":{"injectables/UserService.html":{},"injectables/inMemoryUserRepositorie.html":{},"interfaces/userRepositorie.html":{}}}],["findbyid(userid:string):promise",{"_index":158,"title":{},"body":{"interfaces/UserCreateUseCase.html":{},"injectables/UserService.html":{},"interfaces/userRepositorie.html":{}}}],["follow",{"_index":307,"title":{},"body":{"index.html":{}}}],["framework",{"_index":239,"title":{},"body":{"index.html":{}}}],["full",{"_index":302,"title":{},"body":{"index.html":{}}}],["function",{"_index":185,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":209,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["getting",{"_index":235,"title":{"index.html":{}},"body":{}}],["graph",{"_index":293,"title":{},"body":{"index.html":{}}}],["grow",{"_index":318,"title":{},"body":{"index.html":{}}}],["hands",{"_index":286,"title":{},"body":{"index.html":{}}}],["handy",{"_index":273,"title":{},"body":{"index.html":{}}}],["hash",{"_index":137,"title":{},"body":{"interfaces/UserCreateUseCase.html":{},"injectables/UserService.html":{}}}],["hash(password,1",{"_index":156,"title":{},"body":{"interfaces/UserCreateUseCase.html":{},"injectables/UserService.html":{}}}],["help",{"_index":300,"title":{},"body":{"index.html":{}}}],["here",{"_index":326,"title":{},"body":{"index.html":{}}}],["https://nestjs.com",{"_index":332,"title":{},"body":{"index.html":{}}}],["id:data.id",{"_index":227,"title":{},"body":{"injectables/inMemoryUserRepositorie.html":{}}}],["id:userid",{"_index":160,"title":{},"body":{"interfaces/UserCreateUseCase.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":179,"title":{},"body":{"coverage.html":{}}}],["if(!findbyemail",{"_index":165,"title":{},"body":{"interfaces/UserCreateUseCase.html":{},"injectables/UserService.html":{}}}],["if(!findbyid",{"_index":161,"title":{},"body":{"interfaces/UserCreateUseCase.html":{},"injectables/UserService.html":{}}}],["if(doestheemailisalreadyinuse",{"_index":149,"title":{},"body":{"interfaces/UserCreateUseCase.html":{},"injectables/UserService.html":{}}}],["implements",{"_index":66,"title":{},"body":{"injectables/PrismaService.html":{},"injectables/inMemoryUserRepositorie.html":{}}}],["import",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"interfaces/UserCreateUseCase.html":{},"injectables/UserService.html":{},"interfaces/createPostResponse.html":{},"injectables/inMemoryUserRepositorie.html":{},"interfaces/userRepositorie.html":{}}}],["imports",{"_index":30,"title":{},"body":{"modules/AppModule.html":{}}}],["index",{"_index":59,"title":{"index.html":{}},"body":{"injectables/PrismaService.html":{},"controllers/UserController.html":{},"interfaces/UserCreateUseCase.html":{},"injectables/UserService.html":{},"interfaces/createPostResponse.html":{},"miscellaneous/functions.html":{},"injectables/inMemoryUserRepositorie.html":{},"interfaces/userRepositorie.html":{}}}],["info",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"classes/EntityDoesNotExists.html":{},"injectables/PrismaService.html":{},"classes/ResourceIsAlreadyUse.html":{},"controllers/UserController.html":{},"interfaces/UserCreateUseCase.html":{},"injectables/UserService.html":{},"interfaces/createPostResponse.html":{},"injectables/inMemoryUserRepositorie.html":{},"interfaces/userRepositorie.html":{}}}],["injectable",{"_index":55,"title":{"injectables/PrismaService.html":{},"injectables/UserService.html":{},"injectables/inMemoryUserRepositorie.html":{}},"body":{"injectables/PrismaService.html":{},"interfaces/UserCreateUseCase.html":{},"injectables/UserService.html":{},"coverage.html":{},"injectables/inMemoryUserRepositorie.html":{},"interfaces/userRepositorie.html":{}}}],["injectables",{"_index":56,"title":{},"body":{"injectables/PrismaService.html":{},"injectables/UserService.html":{},"injectables/inMemoryUserRepositorie.html":{},"overview.html":{}}}],["inmemoryuserrepositorie",{"_index":14,"title":{"injectables/inMemoryUserRepositorie.html":{}},"body":{"modules/AppModule.html":{},"coverage.html":{},"injectables/inMemoryUserRepositorie.html":{},"overview.html":{}}}],["installcompile",{"_index":254,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":124,"title":{},"body":{"controllers/UserController.html":{},"interfaces/createPostResponse.html":{}}}],["interact",{"_index":294,"title":{},"body":{"index.html":{}}}],["interface",{"_index":94,"title":{"interfaces/UserCreateUseCase.html":{},"interfaces/createPostResponse.html":{},"interfaces/userRepositorie.html":{}},"body":{"controllers/UserController.html":{},"interfaces/UserCreateUseCase.html":{},"injectables/UserService.html":{},"coverage.html":{},"interfaces/createPostResponse.html":{},"interfaces/userRepositorie.html":{}}}],["interfaces",{"_index":132,"title":{},"body":{"interfaces/UserCreateUseCase.html":{},"interfaces/createPostResponse.html":{},"overview.html":{},"interfaces/userRepositorie.html":{}}}],["item.email",{"_index":233,"title":{},"body":{"injectables/inMemoryUserRepositorie.html":{}}}],["item.id",{"_index":234,"title":{},"body":{"injectables/inMemoryUserRepositorie.html":{}}}],["job",{"_index":311,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":313,"title":{},"body":{"index.html":{}}}],["join",{"_index":324,"title":{},"body":{"index.html":{}}}],["kamil",{"_index":329,"title":{},"body":{"index.html":{}}}],["learn",{"_index":277,"title":{},"body":{"index.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["lib/prisma.service",{"_index":26,"title":{},"body":{"modules/AppModule.html":{}}}],["license",{"_index":335,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":316,"title":{},"body":{"index.html":{}}}],["linkedin",{"_index":309,"title":{},"body":{"index.html":{}}}],["looking",{"_index":310,"title":{},"body":{"index.html":{}}}],["loop",{"_index":305,"title":{},"body":{"index.html":{}}}],["matching",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"classes/EntityDoesNotExists.html":{},"injectables/PrismaService.html":{},"classes/ResourceIsAlreadyUse.html":{},"controllers/UserController.html":{},"interfaces/UserCreateUseCase.html":{},"injectables/UserService.html":{},"coverage.html":{},"interfaces/createPostResponse.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"injectables/inMemoryUserRepositorie.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"interfaces/userRepositorie.html":{}}}],["metadata",{"_index":203,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":60,"title":{},"body":{"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/inMemoryUserRepositorie.html":{},"interfaces/userRepositorie.html":{}}}],["miscellaneous",{"_index":208,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["mit",{"_index":315,"title":{},"body":{"index.html":{}}}],["mode",{"_index":259,"title":{},"body":{"index.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{}}}],["more",{"_index":278,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":330,"title":{},"body":{"index.html":{}}}],["name",{"_index":47,"title":{},"body":{"classes/EntityDoesNotExists.html":{},"classes/ResourceIsAlreadyUse.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/inMemoryUserRepositorie.html":{},"interfaces/userRepositorie.html":{}}}],["name:string(data.name",{"_index":229,"title":{},"body":{"injectables/inMemoryUserRepositorie.html":{}}}],["name:z.string().optional",{"_index":108,"title":{},"body":{"controllers/UserController.html":{},"interfaces/createPostResponse.html":{}}}],["need",{"_index":299,"title":{},"body":{"index.html":{}}}],["nest",{"_index":246,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":334,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":275,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"injectables/PrismaService.html":{},"controllers/UserController.html":{},"interfaces/UserCreateUseCase.html":{},"injectables/UserService.html":{},"interfaces/createPostResponse.html":{},"dependencies.html":{},"injectables/inMemoryUserRepositorie.html":{},"interfaces/userRepositorie.html":{}}}],["nestjs/core",{"_index":197,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":198,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":151,"title":{},"body":{"interfaces/UserCreateUseCase.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["node.js",{"_index":238,"title":{},"body":{"index.html":{}}}],["npm",{"_index":253,"title":{},"body":{"index.html":{}}}],["number",{"_index":194,"title":{},"body":{"interfaces/createPostResponse.html":{}}}],["offer",{"_index":312,"title":{},"body":{"index.html":{}}}],["official",{"_index":288,"title":{},"body":{"index.html":{}}}],["onmoduleinit",{"_index":62,"title":{},"body":{"injectables/PrismaService.html":{}}}],["open",{"_index":317,"title":{},"body":{"index.html":{}}}],["optional",{"_index":49,"title":{},"body":{"classes/EntityDoesNotExists.html":{},"classes/ResourceIsAlreadyUse.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/inMemoryUserRepositorie.html":{},"interfaces/userRepositorie.html":{}}}],["out",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":339,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":195,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["parameters",{"_index":46,"title":{},"body":{"classes/EntityDoesNotExists.html":{},"classes/ResourceIsAlreadyUse.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/inMemoryUserRepositorie.html":{},"interfaces/userRepositorie.html":{}}}],["parse(req.body",{"_index":112,"title":{},"body":{"controllers/UserController.html":{},"interfaces/createPostResponse.html":{}}}],["part",{"_index":301,"title":{},"body":{"index.html":{}}}],["password",{"_index":155,"title":{},"body":{"interfaces/UserCreateUseCase.html":{},"injectables/UserService.html":{}}}],["password:string(data.password",{"_index":226,"title":{},"body":{"injectables/inMemoryUserRepositorie.html":{}}}],["password:z.string",{"_index":110,"title":{},"body":{"controllers/UserController.html":{},"interfaces/createPostResponse.html":{}}}],["please",{"_index":281,"title":{},"body":{"index.html":{}}}],["post",{"_index":89,"title":{},"body":{"controllers/UserController.html":{},"interfaces/createPostResponse.html":{}}}],["post(\"/create",{"_index":102,"title":{},"body":{"controllers/UserController.html":{},"interfaces/createPostResponse.html":{}}}],["post('/create",{"_index":85,"title":{},"body":{"controllers/UserController.html":{}}}],["prefix",{"_index":79,"title":{},"body":{"controllers/UserController.html":{}}}],["prisma",{"_index":136,"title":{},"body":{"interfaces/UserCreateUseCase.html":{},"injectables/UserService.html":{},"dependencies.html":{},"injectables/inMemoryUserRepositorie.html":{},"interfaces/userRepositorie.html":{}}}],["prisma.usercreateinput",{"_index":170,"title":{},"body":{"injectables/UserService.html":{},"injectables/inMemoryUserRepositorie.html":{},"interfaces/userRepositorie.html":{}}}],["prisma/client",{"_index":65,"title":{},"body":{"injectables/PrismaService.html":{},"controllers/UserController.html":{},"interfaces/UserCreateUseCase.html":{},"injectables/UserService.html":{},"interfaces/createPostResponse.html":{},"dependencies.html":{},"injectables/inMemoryUserRepositorie.html":{},"interfaces/userRepositorie.html":{}}}],["prismaclient",{"_index":58,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismaservice",{"_index":11,"title":{"injectables/PrismaService.html":{}},"body":{"modules/AppModule.html":{},"injectables/PrismaService.html":{},"interfaces/UserCreateUseCase.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["prismaservices",{"_index":168,"title":{},"body":{"injectables/UserService.html":{}}}],["prismaservices:prismaservice",{"_index":144,"title":{},"body":{"interfaces/UserCreateUseCase.html":{},"injectables/UserService.html":{}}}],["production",{"_index":261,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":237,"title":{},"body":{"index.html":{}}}],["project",{"_index":250,"title":{},"body":{"index.html":{}}}],["promise",{"_index":88,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{},"interfaces/userRepositorie.html":{}}}],["promises",{"_index":139,"title":{},"body":{"interfaces/UserCreateUseCase.html":{},"injectables/UserService.html":{}}}],["properties",{"_index":134,"title":{"properties.html":{}},"body":{"interfaces/UserCreateUseCase.html":{},"interfaces/createPostResponse.html":{},"injectables/inMemoryUserRepositorie.html":{},"properties.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["public",{"_index":211,"title":{},"body":{"injectables/inMemoryUserRepositorie.html":{}}}],["questions",{"_index":279,"title":{},"body":{"index.html":{}}}],["randomuuid",{"_index":221,"title":{},"body":{"injectables/inMemoryUserRepositorie.html":{}}}],["randomuuid():string(data.id",{"_index":228,"title":{},"body":{"injectables/inMemoryUserRepositorie.html":{}}}],["read",{"_index":325,"title":{},"body":{"index.html":{}}}],["real",{"_index":295,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":202,"title":{},"body":{"dependencies.html":{}}}],["repositories/inmemory/user.repositorie",{"_index":28,"title":{},"body":{"modules/AppModule.html":{}}}],["repository",{"_index":249,"title":{},"body":{"index.html":{}}}],["req",{"_index":87,"title":{},"body":{"controllers/UserController.html":{},"interfaces/createPostResponse.html":{}}}],["req:request):promise",{"_index":104,"title":{},"body":{"controllers/UserController.html":{},"interfaces/createPostResponse.html":{}}}],["request",{"_index":83,"title":{},"body":{"controllers/UserController.html":{}}}],["reset",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["resource",{"_index":73,"title":{},"body":{"classes/ResourceIsAlreadyUse.html":{}}}],["resource:string",{"_index":74,"title":{},"body":{"classes/ResourceIsAlreadyUse.html":{}}}],["resourceisalreadyuse",{"_index":69,"title":{"classes/ResourceIsAlreadyUse.html":{}},"body":{"classes/ResourceIsAlreadyUse.html":{},"controllers/UserController.html":{},"coverage.html":{},"interfaces/createPostResponse.html":{}}}],["resources",{"_index":271,"title":{},"body":{"index.html":{}}}],["response",{"_index":114,"title":{},"body":{"controllers/UserController.html":{},"interfaces/createPostResponse.html":{}}}],["response:response.createduser",{"_index":121,"title":{},"body":{"controllers/UserController.html":{},"interfaces/createPostResponse.html":{}}}],["response:undefined",{"_index":130,"title":{},"body":{"controllers/UserController.html":{},"interfaces/createPostResponse.html":{}}}],["response:user",{"_index":98,"title":{},"body":{"controllers/UserController.html":{},"interfaces/createPostResponse.html":{}}}],["results",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"classes/EntityDoesNotExists.html":{},"injectables/PrismaService.html":{},"classes/ResourceIsAlreadyUse.html":{},"controllers/UserController.html":{},"interfaces/UserCreateUseCase.html":{},"injectables/UserService.html":{},"coverage.html":{},"interfaces/createPostResponse.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"injectables/inMemoryUserRepositorie.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"interfaces/userRepositorie.html":{}}}],["return",{"_index":117,"title":{},"body":{"controllers/UserController.html":{},"interfaces/UserCreateUseCase.html":{},"injectables/UserService.html":{},"interfaces/createPostResponse.html":{},"injectables/inMemoryUserRepositorie.html":{}}}],["returns",{"_index":64,"title":{},"body":{"injectables/PrismaService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"injectables/inMemoryUserRepositorie.html":{},"interfaces/userRepositorie.html":{}}}],["role",{"_index":220,"title":{},"body":{"injectables/inMemoryUserRepositorie.html":{}}}],["role:z.enum([\"admin\",\"manager\",\"client\"]).default('client",{"_index":111,"title":{},"body":{"controllers/UserController.html":{},"interfaces/createPostResponse.html":{}}}],["run",{"_index":255,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":205,"title":{},"body":{"dependencies.html":{}}}],["scalable",{"_index":242,"title":{},"body":{"index.html":{}}}],["server",{"_index":243,"title":{},"body":{"index.html":{}}}],["services/user.service",{"_index":27,"title":{},"body":{"modules/AppModule.html":{}}}],["setup",{"_index":251,"title":{},"body":{"index.html":{}}}],["side",{"_index":244,"title":{},"body":{"index.html":{}}}],["source",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"classes/EntityDoesNotExists.html":{},"injectables/PrismaService.html":{},"classes/ResourceIsAlreadyUse.html":{},"controllers/UserController.html":{},"interfaces/UserCreateUseCase.html":{},"injectables/UserService.html":{},"interfaces/createPostResponse.html":{},"injectables/inMemoryUserRepositorie.html":{},"index.html":{},"interfaces/userRepositorie.html":{}}}],["sponsors",{"_index":320,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":210,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.module.ts",{"_index":21,"title":{},"body":{"modules/AppModule.html":{}}}],["src/controllers/user.controller.ts",{"_index":78,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{},"interfaces/createPostResponse.html":{}}}],["src/controllers/user.controller.ts:18",{"_index":86,"title":{},"body":{"controllers/UserController.html":{}}}],["src/errors/entitydoesnotexists.error",{"_index":141,"title":{},"body":{"interfaces/UserCreateUseCase.html":{},"injectables/UserService.html":{}}}],["src/errors/entitydoesnotexists.error.ts",{"_index":38,"title":{},"body":{"classes/EntityDoesNotExists.html":{},"coverage.html":{}}}],["src/errors/entitydoesnotexists.error.ts:1",{"_index":45,"title":{},"body":{"classes/EntityDoesNotExists.html":{}}}],["src/errors/resourceisalreadyinuse.error",{"_index":90,"title":{},"body":{"controllers/UserController.html":{},"interfaces/createPostResponse.html":{}}}],["src/errors/resourceisalreadyinuse.error.ts",{"_index":70,"title":{},"body":{"classes/ResourceIsAlreadyUse.html":{},"coverage.html":{}}}],["src/errors/resourceisalreadyinuse.error.ts:1",{"_index":72,"title":{},"body":{"classes/ResourceIsAlreadyUse.html":{}}}],["src/lib/prisma.service",{"_index":142,"title":{},"body":{"interfaces/UserCreateUseCase.html":{},"injectables/UserService.html":{}}}],["src/lib/prisma.service.ts",{"_index":57,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/lib/prisma.service.ts:6",{"_index":63,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/main.ts",{"_index":184,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/repositories/inmemory/user.repositorie.ts",{"_index":189,"title":{},"body":{"coverage.html":{},"injectables/inMemoryUserRepositorie.html":{}}}],["src/repositories/inmemory/user.repositorie.ts:20",{"_index":215,"title":{},"body":{"injectables/inMemoryUserRepositorie.html":{}}}],["src/repositories/inmemory/user.repositorie.ts:23",{"_index":216,"title":{},"body":{"injectables/inMemoryUserRepositorie.html":{}}}],["src/repositories/inmemory/user.repositorie.ts:8",{"_index":219,"title":{},"body":{"injectables/inMemoryUserRepositorie.html":{}}}],["src/repositories/inmemory/user.repositorie.ts:9",{"_index":213,"title":{},"body":{"injectables/inMemoryUserRepositorie.html":{}}}],["src/repositories/userrepositorie.ts",{"_index":187,"title":{},"body":{"coverage.html":{},"interfaces/userRepositorie.html":{}}}],["src/repositories/userrepositorie.ts:5",{"_index":346,"title":{},"body":{"interfaces/userRepositorie.html":{}}}],["src/repositories/userrepositorie.ts:6",{"_index":348,"title":{},"body":{"interfaces/userRepositorie.html":{}}}],["src/repositories/userrepositorie.ts:7",{"_index":347,"title":{},"body":{"interfaces/userRepositorie.html":{}}}],["src/services/user.service",{"_index":91,"title":{},"body":{"controllers/UserController.html":{},"interfaces/createPostResponse.html":{}}}],["src/services/user.service.ts",{"_index":133,"title":{},"body":{"interfaces/UserCreateUseCase.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["src/services/user.service.ts:13",{"_index":167,"title":{},"body":{"injectables/UserService.html":{}}}],["src/services/user.service.ts:17",{"_index":171,"title":{},"body":{"injectables/UserService.html":{}}}],["src/services/user.service.ts:37",{"_index":175,"title":{},"body":{"injectables/UserService.html":{}}}],["src/services/user.service.ts:49",{"_index":173,"title":{},"body":{"injectables/UserService.html":{}}}],["start",{"_index":257,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":260,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":262,"title":{},"body":{"index.html":{}}}],["started",{"_index":236,"title":{"index.html":{}},"body":{}}],["starter",{"_index":248,"title":{},"body":{"index.html":{}}}],["statements",{"_index":180,"title":{},"body":{"coverage.html":{}}}],["statuscode",{"_index":125,"title":{},"body":{"controllers/UserController.html":{},"interfaces/createPostResponse.html":{}}}],["statuscode:201",{"_index":118,"title":{},"body":{"controllers/UserController.html":{},"interfaces/createPostResponse.html":{}}}],["statuscode:number",{"_index":96,"title":{},"body":{"controllers/UserController.html":{},"interfaces/createPostResponse.html":{}}}],["stay",{"_index":304,"title":{},"body":{"index.html":{}}}],["string",{"_index":43,"title":{},"body":{"classes/EntityDoesNotExists.html":{},"classes/ResourceIsAlreadyUse.html":{},"injectables/UserService.html":{},"interfaces/createPostResponse.html":{},"injectables/inMemoryUserRepositorie.html":{},"interfaces/userRepositorie.html":{}}}],["super(`the",{"_index":53,"title":{},"body":{"classes/EntityDoesNotExists.html":{},"classes/ResourceIsAlreadyUse.html":{}}}],["support",{"_index":280,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":337,"title":{},"body":{"modules.html":{}}}],["table",{"_index":192,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":191,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":265,"title":{},"body":{"index.html":{}}}],["test:covresources",{"_index":268,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":267,"title":{},"body":{"index.html":{}}}],["tests",{"_index":263,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":319,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":68,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.prismaservices.user.create",{"_index":157,"title":{},"body":{"interfaces/UserCreateUseCase.html":{},"injectables/UserService.html":{}}}],["this.prismaservices.user.findunique",{"_index":147,"title":{},"body":{"interfaces/UserCreateUseCase.html":{},"injectables/UserService.html":{}}}],["this.users.find(item",{"_index":232,"title":{},"body":{"injectables/inMemoryUserRepositorie.html":{}}}],["this.users.push(_data",{"_index":231,"title":{},"body":{"injectables/inMemoryUserRepositorie.html":{}}}],["this.userservices.create",{"_index":115,"title":{},"body":{"controllers/UserController.html":{},"interfaces/createPostResponse.html":{}}}],["throw",{"_index":150,"title":{},"body":{"interfaces/UserCreateUseCase.html":{},"injectables/UserService.html":{}}}],["time",{"_index":296,"title":{},"body":{"index.html":{}}}],["touch",{"_index":327,"title":{},"body":{"index.html":{}}}],["try",{"_index":113,"title":{},"body":{"controllers/UserController.html":{},"interfaces/createPostResponse.html":{}}}],["twitter",{"_index":333,"title":{},"body":{"index.html":{}}}],["type",{"_index":48,"title":{},"body":{"classes/EntityDoesNotExists.html":{},"classes/ResourceIsAlreadyUse.html":{},"controllers/UserController.html":{},"interfaces/UserCreateUseCase.html":{},"injectables/UserService.html":{},"coverage.html":{},"interfaces/createPostResponse.html":{},"injectables/inMemoryUserRepositorie.html":{},"interfaces/userRepositorie.html":{}}}],["typescript",{"_index":247,"title":{},"body":{"index.html":{}}}],["undefined",{"_index":99,"title":{},"body":{"controllers/UserController.html":{},"interfaces/createPostResponse.html":{},"injectables/inMemoryUserRepositorie.html":{}}}],["unit",{"_index":264,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":214,"title":{},"body":{"injectables/inMemoryUserRepositorie.html":{}}}],["unlicensed",{"_index":345,"title":{},"body":{"properties.html":{}}}],["updates",{"_index":306,"title":{},"body":{"index.html":{}}}],["use",{"_index":76,"title":{},"body":{"classes/ResourceIsAlreadyUse.html":{},"controllers/UserController.html":{},"interfaces/UserCreateUseCase.html":{},"injectables/UserService.html":{},"interfaces/createPostResponse.html":{}}}],["user",{"_index":80,"title":{},"body":{"controllers/UserController.html":{},"interfaces/UserCreateUseCase.html":{},"injectables/UserService.html":{},"interfaces/createPostResponse.html":{},"injectables/inMemoryUserRepositorie.html":{},"interfaces/userRepositorie.html":{}}}],["usercontroller",{"_index":23,"title":{"controllers/UserController.html":{}},"body":{"modules/AppModule.html":{},"controllers/UserController.html":{},"coverage.html":{},"interfaces/createPostResponse.html":{}}}],["usercreateusecase",{"_index":131,"title":{"interfaces/UserCreateUseCase.html":{}},"body":{"interfaces/UserCreateUseCase.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["userid",{"_index":176,"title":{},"body":{"injectables/UserService.html":{},"injectables/inMemoryUserRepositorie.html":{},"interfaces/userRepositorie.html":{}}}],["userrepositorie",{"_index":188,"title":{"interfaces/userRepositorie.html":{}},"body":{"coverage.html":{},"injectables/inMemoryUserRepositorie.html":{},"interfaces/userRepositorie.html":{}}}],["users",{"_index":212,"title":{},"body":{"injectables/inMemoryUserRepositorie.html":{}}}],["users:user",{"_index":223,"title":{},"body":{"injectables/inMemoryUserRepositorie.html":{}}}],["userservice",{"_index":13,"title":{"injectables/UserService.html":{}},"body":{"modules/AppModule.html":{},"controllers/UserController.html":{},"interfaces/UserCreateUseCase.html":{},"injectables/UserService.html":{},"coverage.html":{},"interfaces/createPostResponse.html":{},"overview.html":{}}}],["userservice,inmemoryuserrepositorie",{"_index":31,"title":{},"body":{"modules/AppModule.html":{}}}],["userservices:userservice",{"_index":101,"title":{},"body":{"controllers/UserController.html":{},"interfaces/createPostResponse.html":{}}}],["using",{"_index":297,"title":{},"body":{"index.html":{}}}],["value",{"_index":218,"title":{},"body":{"injectables/inMemoryUserRepositorie.html":{}}}],["var",{"_index":153,"title":{},"body":{"interfaces/UserCreateUseCase.html":{},"injectables/UserService.html":{}}}],["version",{"_index":343,"title":{},"body":{"properties.html":{}}}],["video",{"_index":289,"title":{},"body":{"index.html":{}}}],["visit",{"_index":276,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":291,"title":{},"body":{"index.html":{}}}],["watch",{"_index":258,"title":{},"body":{"index.html":{}}}],["website",{"_index":331,"title":{},"body":{"index.html":{}}}],["working",{"_index":274,"title":{},"body":{"index.html":{}}}],["x",{"_index":308,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":323,"title":{},"body":{"index.html":{}}}],["z",{"_index":92,"title":{},"body":{"controllers/UserController.html":{},"interfaces/createPostResponse.html":{}}}],["z.object",{"_index":107,"title":{},"body":{"controllers/UserController.html":{},"interfaces/createPostResponse.html":{}}}],["zod",{"_index":93,"title":{},"body":{"controllers/UserController.html":{},"interfaces/createPostResponse.html":{},"dependencies.html":{}}}],["zoom",{"_index":15,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\n\nPrismaService\n\nPrismaService\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nPrismaService->AppModule\n\n\n\n\n\nUserService\n\nUserService\n\nAppModule -->\n\nUserService->AppModule\n\n\n\n\n\ninMemoryUserRepositorie\n\ninMemoryUserRepositorie\n\nAppModule -->\n\ninMemoryUserRepositorie->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                        \n                            UserService\n                        \n                        \n                            inMemoryUserRepositorie\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaService } from './lib/prisma.service';\nimport { UserService } from './services/user.service';\nimport { inMemoryUserRepositorie } from './repositories/inMemory/user.repositorie';\nimport { UserController } from './controllers/user.controller';\n\n\n@Module({\n  imports: [],\n  controllers: [UserController],\n  providers: [PrismaService, UserService,inMemoryUserRepositorie],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EntityDoesNotExists.html":{"url":"classes/EntityDoesNotExists.html","title":"class - EntityDoesNotExists","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EntityDoesNotExists\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/errors/entityDoesNotExists.error.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(Entity: string)\n                    \n                \n                        \n                            \n                                Defined in src/errors/entityDoesNotExists.error.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        Entity\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class EntityDoesNotExists extends Error{\n    constructor(private Entity:string){\n        super(`the ${Entity} does not exists`)\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/prisma.service.ts:6\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n  async onModuleInit() {\n    await this.$connect();\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResourceIsAlreadyUse.html":{"url":"classes/ResourceIsAlreadyUse.html","title":"class - ResourceIsAlreadyUse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResourceIsAlreadyUse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/errors/ResourceIsAlreadyInuse.error.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(Resource: string)\n                    \n                \n                        \n                            \n                                Defined in src/errors/ResourceIsAlreadyInuse.error.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        Resource\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ResourceIsAlreadyUse extends Error{\n    constructor(private Resource:string){\n        super(`the ${Resource} is already in Use`)\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/controllers/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/create')\n                \n            \n\n                    \n                        \n                            Defined in src/controllers/user.controller.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post, Req } from '@nestjs/common';\nimport { User } from '@prisma/client';\nimport { ResourceIsAlreadyUse } from 'src/errors/ResourceIsAlreadyInuse.error';\nimport { UserService } from 'src/services/user.service';\nimport { z } from 'zod';\n\ninterface createPostResponse{\n    StatusCode:number,\n    Description:string,\n    response:User | undefined\n}\n\n@Controller('user')\nexport class UserController {\n    constructor(private UserServices:UserService){}\n    \n    @Post(\"/create\")\n    async create(@Req() req:Request):Promise{\n        const {Email,Name,Password,Role} = z.object({\n            Name:z.string().optional(),\n            Email:z.string().email(),\n            Password:z.string(),\n            Role:z.enum([\"ADMIN\",\"MANAGER\",\"CLIENT\"]).default('CLIENT')\n        }).parse(req.body)  \n        \n        try{\n            const response = await this.UserServices.create({\n                Email,Password,Name,Role\n            })\n\n            return {\n                StatusCode:201,\n                Description:\"Successfilly created a user\",\n                response:response.createdUser\n            }\n        }catch(err){\n            if( err instanceof ResourceIsAlreadyUse){\n                return {\n                    StatusCode: 409,\n                    Description:\"This email adress is already in use\",\n                    response:undefined\n                }\n            }\n        }\n        \n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UserCreateUseCase.html":{"url":"interfaces/UserCreateUseCase.html","title":"interface - UserCreateUseCase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UserCreateUseCase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/user.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            createdUser\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        createdUser\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createdUser:     User\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     User\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Prisma, User } from '@prisma/client';\nimport { hash } from 'bcryptjs';\nimport { promises } from 'dns';\nimport { EntityDoesNotExists } from 'src/errors/entityDoesNotExists.error';\nimport { PrismaService } from 'src/lib/prisma.service';\n\ninterface UserCreateUseCase{\n    createdUser:User\n}\n\n@Injectable()\nexport class UserService {\n    constructor(private prismaServices:PrismaService){}\n\n\n    async create(data:Prisma.UserCreateInput):Promise{\n        const doesTheEmailIsAlreadyInUse = await this.prismaServices.user.findUnique({\n            where:{\n                Email:data.Email\n            }\n        })\n        if(doesTheEmailIsAlreadyInUse){\n            throw new Error(\"The email is already in use\");\n        }\n        var {Email,Password,Name,Role} = data\n        Password = await hash(Password,1)\n        const createdUser = await this.prismaServices.user.create({\n            data:{\n                Email,Password,Name,Role\n            }\n        })\n        return {\n            createdUser\n        }\n    }\n    async findById(userId:string):Promise{\n        const findById = await this.prismaServices.user.findUnique({\n            where:{\n                Id:userId\n            }\n        })\n        if(!findById){\n            throw new EntityDoesNotExists(\"user\")\n        }\n\n        return findById\n    } \n    async findByEmail(Email:string):Promise{\n        const findByEmail = await this.prismaServices.user.findUnique({\n            where:{\n                Email\n            }\n        })\n        if(!findByEmail){\n            throw new EntityDoesNotExists(\"user\")\n        }\n\n        return findByEmail\n    } \n    \n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/services/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findByEmail\n                            \n                            \n                                    Async\n                                findById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prismaServices: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/services/user.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prismaServices\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(data: Prisma.UserCreateInput)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/user.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        Prisma.UserCreateInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByEmail(Email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/user.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                Email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/services/user.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Prisma, User } from '@prisma/client';\nimport { hash } from 'bcryptjs';\nimport { promises } from 'dns';\nimport { EntityDoesNotExists } from 'src/errors/entityDoesNotExists.error';\nimport { PrismaService } from 'src/lib/prisma.service';\n\ninterface UserCreateUseCase{\n    createdUser:User\n}\n\n@Injectable()\nexport class UserService {\n    constructor(private prismaServices:PrismaService){}\n\n\n    async create(data:Prisma.UserCreateInput):Promise{\n        const doesTheEmailIsAlreadyInUse = await this.prismaServices.user.findUnique({\n            where:{\n                Email:data.Email\n            }\n        })\n        if(doesTheEmailIsAlreadyInUse){\n            throw new Error(\"The email is already in use\");\n        }\n        var {Email,Password,Name,Role} = data\n        Password = await hash(Password,1)\n        const createdUser = await this.prismaServices.user.create({\n            data:{\n                Email,Password,Name,Role\n            }\n        })\n        return {\n            createdUser\n        }\n    }\n    async findById(userId:string):Promise{\n        const findById = await this.prismaServices.user.findUnique({\n            where:{\n                Id:userId\n            }\n        })\n        if(!findById){\n            throw new EntityDoesNotExists(\"user\")\n        }\n\n        return findById\n    } \n    async findByEmail(Email:string):Promise{\n        const findByEmail = await this.prismaServices.user.findUnique({\n            where:{\n                Email\n            }\n        })\n        if(!findByEmail){\n            throw new EntityDoesNotExists(\"user\")\n        }\n\n        return findByEmail\n    } \n    \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/controllers/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/controllers/user.controller.ts\n            \n            interface\n            createPostResponse\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/errors/ResourceIsAlreadyInuse.error.ts\n            \n            class\n            ResourceIsAlreadyUse\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/errors/entityDoesNotExists.error.ts\n            \n            class\n            EntityDoesNotExists\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/lib/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repositories/UserRepositorie.ts\n            \n            interface\n            userRepositorie\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/repositories/inMemory/user.repositorie.ts\n            \n            injectable\n            inMemoryUserRepositorie\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/services/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/services/user.service.ts\n            \n            interface\n            UserCreateUseCase\n            \n                0 %\n                (0/2)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/createPostResponse.html":{"url":"interfaces/createPostResponse.html","title":"interface - createPostResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  createPostResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/controllers/user.controller.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            Description\n                                        \n                                \n                                \n                                        \n                                            response\n                                        \n                                \n                                \n                                        \n                                            StatusCode\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        Description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        response\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        response:     User | undefined\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     User | undefined\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        StatusCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        StatusCode:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Controller, Post, Req } from '@nestjs/common';\nimport { User } from '@prisma/client';\nimport { ResourceIsAlreadyUse } from 'src/errors/ResourceIsAlreadyInuse.error';\nimport { UserService } from 'src/services/user.service';\nimport { z } from 'zod';\n\ninterface createPostResponse{\n    StatusCode:number,\n    Description:string,\n    response:User | undefined\n}\n\n@Controller('user')\nexport class UserController {\n    constructor(private UserServices:UserService){}\n    \n    @Post(\"/create\")\n    async create(@Req() req:Request):Promise{\n        const {Email,Name,Password,Role} = z.object({\n            Name:z.string().optional(),\n            Email:z.string().email(),\n            Password:z.string(),\n            Role:z.enum([\"ADMIN\",\"MANAGER\",\"CLIENT\"]).default('CLIENT')\n        }).parse(req.body)  \n        \n        try{\n            const response = await this.UserServices.create({\n                Email,Password,Name,Role\n            })\n\n            return {\n                StatusCode:201,\n                Description:\"Successfilly created a user\",\n                response:response.createdUser\n            }\n        }catch(err){\n            if( err instanceof ResourceIsAlreadyUse){\n                return {\n                    StatusCode: 409,\n                    Description:\"This email adress is already in use\",\n                    response:undefined\n                }\n            }\n        }\n        \n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @prisma/client : ^5.19.1\n        \n            bcryptjs : ^2.4.3\n        \n            prisma : ^5.19.1\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            zod : ^3.23.8\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/inMemoryUserRepositorie.html":{"url":"injectables/inMemoryUserRepositorie.html","title":"injectable - inMemoryUserRepositorie","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  inMemoryUserRepositorie\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repositories/inMemory/user.repositorie.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                users\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findByEmail\n                            \n                            \n                                    Async\n                                findById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(data: Prisma.UserCreateInput)\n                \n            \n\n\n                    \n                        \n                            Defined in src/repositories/inMemory/user.repositorie.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        Prisma.UserCreateInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByEmail(Email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/repositories/inMemory/user.repositorie.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                Email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findById(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/repositories/inMemory/user.repositorie.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :     User[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/repositories/inMemory/user.repositorie.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Prisma, Role, User } from \"@prisma/client\";\nimport { userRepositorie } from \"../UserRepositorie\";\nimport { randomUUID } from \"crypto\";\nimport { Injectable } from \"@nestjs/common\";\n\n@Injectable()\nexport class inMemoryUserRepositorie implements userRepositorie{\n    public users:User[] = []\n    async create(data: Prisma.UserCreateInput){\n        const _data= {\n            Email:String(data.Email),\n            Password:String(data.Password),\n            Id:data.Id == undefined? randomUUID():String(data.Id),\n            Name:String(data.Name),\n            Role: data.Role as Role,\n        }\n        this.users.push(_data)\n        return _data\n    }\n    async findByEmail(Email: string){\n        return this.users.find(item=> item.Email == Email)\n    }\n    async findById(userId: string){\n        return this.users.find(item=> item.Id == userId)\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\n\nPrismaService\n\nPrismaService\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nPrismaService->AppModule\n\n\n\n\n\nUserService\n\nUserService\n\nAppModule -->\n\nUserService->AppModule\n\n\n\n\n\ninMemoryUserRepositorie\n\ninMemoryUserRepositorie\n\nAppModule -->\n\ninMemoryUserRepositorie->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Controller\n                \n            \n        \n        \n            \n                \n                    \n                    3 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/userRepositorie.html":{"url":"interfaces/userRepositorie.html","title":"interface - userRepositorie","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  userRepositorie\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/repositories/UserRepositorie.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        create\n                                    \n                                \n                                \n                                    \n                                        findByEmail\n                                    \n                                \n                                \n                                    \n                                        findById\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(data: Prisma.UserCreateInput)\n                \n            \n\n\n                    \n                        \n                            Defined in src/repositories/UserRepositorie.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        Prisma.UserCreateInput\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByEmail\n                        \n                    \n                \n            \n            \n                \nfindByEmail(Email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/repositories/UserRepositorie.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                Email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findById\n                        \n                    \n                \n            \n            \n                \nfindById(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/repositories/UserRepositorie.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { Prisma, User } from \"@prisma/client\";\n\n export interface userRepositorie{\n    create(data:Prisma.UserCreateInput):Promise\n    findById(userId:string):Promise\n    findByEmail(Email:string):Promise \n }\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
